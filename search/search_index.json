{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Ember Mug \u00b6 Python Library for Ember Mugs Documentation: https://sopelj.github.io/python-ember-mug GitHub: https://github.com/sopelj/python-ember-mug PyPI: https://pypi.org/project/python-ember-mug/ Free software: MIT Summary \u00b6 Library to attempt to interact with Ember Mugs via Bluetooth using the bleak library. This was created for use with my Home Assistant integration , but could be useful separately and has a simple CLI interface too. Note : I have only tested with my Ember Mug 2, but others should work. (Please let me know) Features \u00b6 Finding mugs Connecting to Mugs Reading Information (Colour, temp, liquid level, etc.) Writing (Desired temp, colour, temperature unit)* Polling for changes *** Writing only works if the mug has been set up in the app previously Usage \u00b6 Python \u00b6 from ember_mug.scanner import find_mug , discover_mugs from ember_mug.mug import EmberMug # if first time with mug in pairing mugs = await discover_mugs () device = mugs [ 0 ] # after paired you can simply use device = await find_mug () mug = EmberMug ( device ) async with mug . connection () as con : print ( 'Connected. \\n Fetching Info' ) await con . update_all () print ( mug . formatted_data ) CLI \u00b6 It can also be run via command line either directly with ember-mug --help or as a module with python -m ember_mug --help There are four options with different subsections. You can see them by specifying them before help. eg ember-mug poll --help ember-mug discover # Finds the mug in pairing mode for the first time ember-mug poll # fetches info and keeps listening for notifications ember-mug get name target-temp # Prints name and target temp of mug ember-mug set --name \"My mug\" --target-temp 56 .8 # Sets the name and target temp to specified values Basic options: Command Use discover Find/List all detected unpaired mugs in pairing mode find Find one already paired mugs info Connect to one mug and print its current state poll Connect to one mug and print its current state and keep watching for changes get Get the value(s) of one or more attribute(s) by name set Set one or more values on the mug Caveats \u00b6 Since this api is not public, a lot of guesswork and reverse engineering is involved, so it's not perfect. If the mug has not been set up in the app since it was reset, writing is not allowed. I don't know what they set in the app, but it changes something, and it doesn't work without it. Once that mug has been set up in the app, you should ideally forget the device or at least turn off bluetooth whilst using it here, or you will probably get disconnected often I haven't figured out some attributes like udsk, dsk, location, Todo \u00b6 Add cli interface for setting values Test with other devices. Please let me know if you have tried it with others. Credits \u00b6 This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#python-ember-mug","text":"Python Library for Ember Mugs Documentation: https://sopelj.github.io/python-ember-mug GitHub: https://github.com/sopelj/python-ember-mug PyPI: https://pypi.org/project/python-ember-mug/ Free software: MIT","title":"Python Ember Mug"},{"location":"#summary","text":"Library to attempt to interact with Ember Mugs via Bluetooth using the bleak library. This was created for use with my Home Assistant integration , but could be useful separately and has a simple CLI interface too. Note : I have only tested with my Ember Mug 2, but others should work. (Please let me know)","title":"Summary"},{"location":"#features","text":"Finding mugs Connecting to Mugs Reading Information (Colour, temp, liquid level, etc.) Writing (Desired temp, colour, temperature unit)* Polling for changes *** Writing only works if the mug has been set up in the app previously","title":"Features"},{"location":"#usage","text":"","title":"Usage"},{"location":"#python","text":"from ember_mug.scanner import find_mug , discover_mugs from ember_mug.mug import EmberMug # if first time with mug in pairing mugs = await discover_mugs () device = mugs [ 0 ] # after paired you can simply use device = await find_mug () mug = EmberMug ( device ) async with mug . connection () as con : print ( 'Connected. \\n Fetching Info' ) await con . update_all () print ( mug . formatted_data )","title":"Python"},{"location":"#cli","text":"It can also be run via command line either directly with ember-mug --help or as a module with python -m ember_mug --help There are four options with different subsections. You can see them by specifying them before help. eg ember-mug poll --help ember-mug discover # Finds the mug in pairing mode for the first time ember-mug poll # fetches info and keeps listening for notifications ember-mug get name target-temp # Prints name and target temp of mug ember-mug set --name \"My mug\" --target-temp 56 .8 # Sets the name and target temp to specified values Basic options: Command Use discover Find/List all detected unpaired mugs in pairing mode find Find one already paired mugs info Connect to one mug and print its current state poll Connect to one mug and print its current state and keep watching for changes get Get the value(s) of one or more attribute(s) by name set Set one or more values on the mug","title":"CLI"},{"location":"#caveats","text":"Since this api is not public, a lot of guesswork and reverse engineering is involved, so it's not perfect. If the mug has not been set up in the app since it was reset, writing is not allowed. I don't know what they set in the app, but it changes something, and it doesn't work without it. Once that mug has been set up in the app, you should ideally forget the device or at least turn off bluetooth whilst using it here, or you will probably get disconnected often I haven't figured out some attributes like udsk, dsk, location,","title":"Caveats"},{"location":"#todo","text":"Add cli interface for setting values Test with other devices. Please let me know if you have tried it with others.","title":"Todo"},{"location":"#credits","text":"This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"changelog/","text":"Changelog \u00b6 [0.4.0] \u00b6 Changed \u00b6 Improve documentation for setting values Added \u00b6 cli option to get specific attributes by name cli option to set attributes cli option to limit output Fixed \u00b6 Column number calculation [0.3.7] \u00b6 Fix \u00b6 Remove ensure_connection in update_initial and update_multiple because it causes timeouts and loops Changes \u00b6 Update docs to document procedure for writing attributes [0.3.6] \u00b6 Fix \u00b6 Remove retry_bluetooth_connection_error... [0.3.5] \u00b6 Fix \u00b6 Add fallback method for retry_bluetooth_connection_error to not break on patch. [0.3.4] \u00b6 Added \u00b6 Use retry_bluetooth_connection_error on update methods [0.3.3] \u00b6 Fix \u00b6 Try to fetch services on initial connection to wake device [0.3.2] \u00b6 Fix \u00b6 Try to fix, but also always catch encoding errors [0.3.1] \u00b6 Fix \u00b6 Catch error decoding UDSK and log warning to avoid error setting up [0.3.0] \u00b6 Added \u00b6 Also packaged as CLI command to be used directly Add register_callback Fire callbacks in notifications and all updates Add set_device and pass to establish_connection Changed \u00b6 Update bleak-retry-connector to 1.17.1 Update bleak to 0.17.0 Renamed connect to ensure_connection [0.2.5] \u00b6 Fixed \u00b6 Catch EOFError during pair, which is not caught in bleak/dbus-next currently [0.2.4] \u00b6 Added \u00b6 Lots of tests Fixed \u00b6 Typo in metric in print_changes Fix Name validation rules set_temperature_unit method name [0.2.3] \u00b6 Added \u00b6 Format information as table in CLI Print message with error instead of stack trace in cli if bleak error occurs in find/discover Fixed \u00b6 Incorrect name for imperial CLI flag [0.2.2] \u00b6 Fixed \u00b6 Only try to disconnect if client is present [0.2.1] \u00b6 Added \u00b6 Tests for data, scanner, mug CLI flag for imperial units Fixed \u00b6 meta_display was not property target_temp returned current_temp extra flag was not applied to polling [0.2.0] \u00b6 Added \u00b6 bleak-retry-connector to help connect and maintain connection to mug Add option to show/hide less useful mug info Formatting for polled changes in CLI Add more tests Removed \u00b6 Support for python 3.8 - In order to use bleak-retry-connector [0.1.2] - 2022-09-03 \u00b6 Added \u00b6 Add adapter param to EmberMugConnection and scanners (for BlueZ only) Add mac params to discover and find methods Decode udsk and mug id. Even if the values aren't super useful. Fixed \u00b6 Improve CLI interface and gracefully handle no options provided [0.1.1] - 2022-09-03 \u00b6 Bump version because of issues with name conflicts Fix GitHub Actions issues with Poetry [0.1.0] - 2022-08-26 \u00b6 First release on PyPI test.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#040","text":"","title":"[0.4.0]"},{"location":"changelog/#changed","text":"Improve documentation for setting values","title":"Changed"},{"location":"changelog/#added","text":"cli option to get specific attributes by name cli option to set attributes cli option to limit output","title":"Added"},{"location":"changelog/#fixed","text":"Column number calculation","title":"Fixed"},{"location":"changelog/#037","text":"","title":"[0.3.7]"},{"location":"changelog/#fix","text":"Remove ensure_connection in update_initial and update_multiple because it causes timeouts and loops","title":"Fix"},{"location":"changelog/#changes","text":"Update docs to document procedure for writing attributes","title":"Changes"},{"location":"changelog/#036","text":"","title":"[0.3.6]"},{"location":"changelog/#fix_1","text":"Remove retry_bluetooth_connection_error...","title":"Fix"},{"location":"changelog/#035","text":"","title":"[0.3.5]"},{"location":"changelog/#fix_2","text":"Add fallback method for retry_bluetooth_connection_error to not break on patch.","title":"Fix"},{"location":"changelog/#034","text":"","title":"[0.3.4]"},{"location":"changelog/#added_1","text":"Use retry_bluetooth_connection_error on update methods","title":"Added"},{"location":"changelog/#033","text":"","title":"[0.3.3]"},{"location":"changelog/#fix_3","text":"Try to fetch services on initial connection to wake device","title":"Fix"},{"location":"changelog/#032","text":"","title":"[0.3.2]"},{"location":"changelog/#fix_4","text":"Try to fix, but also always catch encoding errors","title":"Fix"},{"location":"changelog/#031","text":"","title":"[0.3.1]"},{"location":"changelog/#fix_5","text":"Catch error decoding UDSK and log warning to avoid error setting up","title":"Fix"},{"location":"changelog/#030","text":"","title":"[0.3.0]"},{"location":"changelog/#added_2","text":"Also packaged as CLI command to be used directly Add register_callback Fire callbacks in notifications and all updates Add set_device and pass to establish_connection","title":"Added"},{"location":"changelog/#changed_1","text":"Update bleak-retry-connector to 1.17.1 Update bleak to 0.17.0 Renamed connect to ensure_connection","title":"Changed"},{"location":"changelog/#025","text":"","title":"[0.2.5]"},{"location":"changelog/#fixed_1","text":"Catch EOFError during pair, which is not caught in bleak/dbus-next currently","title":"Fixed"},{"location":"changelog/#024","text":"","title":"[0.2.4]"},{"location":"changelog/#added_3","text":"Lots of tests","title":"Added"},{"location":"changelog/#fixed_2","text":"Typo in metric in print_changes Fix Name validation rules set_temperature_unit method name","title":"Fixed"},{"location":"changelog/#023","text":"","title":"[0.2.3]"},{"location":"changelog/#added_4","text":"Format information as table in CLI Print message with error instead of stack trace in cli if bleak error occurs in find/discover","title":"Added"},{"location":"changelog/#fixed_3","text":"Incorrect name for imperial CLI flag","title":"Fixed"},{"location":"changelog/#022","text":"","title":"[0.2.2]"},{"location":"changelog/#fixed_4","text":"Only try to disconnect if client is present","title":"Fixed"},{"location":"changelog/#021","text":"","title":"[0.2.1]"},{"location":"changelog/#added_5","text":"Tests for data, scanner, mug CLI flag for imperial units","title":"Added"},{"location":"changelog/#fixed_5","text":"meta_display was not property target_temp returned current_temp extra flag was not applied to polling","title":"Fixed"},{"location":"changelog/#020","text":"","title":"[0.2.0]"},{"location":"changelog/#added_6","text":"bleak-retry-connector to help connect and maintain connection to mug Add option to show/hide less useful mug info Formatting for polled changes in CLI Add more tests","title":"Added"},{"location":"changelog/#removed","text":"Support for python 3.8 - In order to use bleak-retry-connector","title":"Removed"},{"location":"changelog/#012---2022-09-03","text":"","title":"[0.1.2] - 2022-09-03"},{"location":"changelog/#added_7","text":"Add adapter param to EmberMugConnection and scanners (for BlueZ only) Add mac params to discover and find methods Decode udsk and mug id. Even if the values aren't super useful.","title":"Added"},{"location":"changelog/#fixed_6","text":"Improve CLI interface and gracefully handle no options provided","title":"Fixed"},{"location":"changelog/#011---2022-09-03","text":"Bump version because of issues with name conflicts Fix GitHub Actions issues with Poetry","title":"[0.1.1] - 2022-09-03"},{"location":"changelog/#010---2022-08-26","text":"First release on PyPI test.","title":"[0.1.0] - 2022-08-26"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/sopelj/python-ember-mug/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Python Ember Mug could always use more documentation, whether as part of the official Python Ember Mug docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/sopelj/python-ember-mug/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up python-ember-mug for local development. Fork the python-ember-mug repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/python-ember-mug.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8, 3.9 and 3.10. Check https://github.com/sopelj/python-ember-mug/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_python_ember_mug.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/sopelj/python-ember-mug/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Python Ember Mug could always use more documentation, whether as part of the official Python Ember Mug docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/sopelj/python-ember-mug/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up python-ember-mug for local development. Fork the python-ember-mug repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/python-ember-mug.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8, 3.9 and 3.10. Check https://github.com/sopelj/python-ember-mug/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_python_ember_mug.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Python Ember Mug, run this command in your terminal: $ pip install python-ember-mug This is the preferred method to install Python Ember Mug, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for Python Ember Mug can be downloaded from the Github repo [https://github.com/sopelj/python-ember-mug]. You can either clone the public repository: $ git clone git://github.com/sopelj/python-ember-mug Or download the tarball [https://github.com/sopelj/python-ember-mug/tarball/master]: $ curl -OJL https://github.com/sopelj/python-ember-mug/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Python Ember Mug, run this command in your terminal: $ pip install python-ember-mug This is the preferred method to install Python Ember Mug, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Python Ember Mug can be downloaded from the Github repo [https://github.com/sopelj/python-ember-mug]. You can either clone the public repository: $ git clone git://github.com/sopelj/python-ember-mug Or download the tarball [https://github.com/sopelj/python-ember-mug/tarball/master]: $ curl -OJL https://github.com/sopelj/python-ember-mug/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 In Python Project \u00b6 To use Python Ember Mug in a project from ember_mug.scanner import find_mug , discover_mugs from ember_mug.mug import EmberMug # if first time with mug in pairing mugs = await discover_mugs () device = mugs [ 0 ] # after paired you can simply use device = await find_mug () mug = EmberMug ( device ) async with mug . connection () as con : print ( 'Connected. \\n Fetching Info' ) await con . update_all () print ( mug . formatted_data ) Using CLI interface \u00b6 It can also be run via command line either directly with ember-mug --help or as a module with python -m ember_mug --help There are five options with different subsections. You can see them by specifying them before help. eg ember-mug poll --help ember-mug discover # Finds the mug in pairing mode for the first time ember-mug poll # fetches info and keeps listening for notifications ember-mug get name target-temp # Prints name and target temp of mug ember-mug set --name \"My mug\" --target-temp 56 .8 # Sets the name and target temp to specified values Basic options: Command Use discover Find/List all detected unpaired mugs in pairing mode find Find one already paired mugs info Connect to one mug and print its current state poll Connect to one mug and print its current state and keep watching for changes get Get the value(s) of one or more attribute(s) by name set Set one or more values on the mug","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#in-python-project","text":"To use Python Ember Mug in a project from ember_mug.scanner import find_mug , discover_mugs from ember_mug.mug import EmberMug # if first time with mug in pairing mugs = await discover_mugs () device = mugs [ 0 ] # after paired you can simply use device = await find_mug () mug = EmberMug ( device ) async with mug . connection () as con : print ( 'Connected. \\n Fetching Info' ) await con . update_all () print ( mug . formatted_data )","title":"In Python Project"},{"location":"usage/#using-cli-interface","text":"It can also be run via command line either directly with ember-mug --help or as a module with python -m ember_mug --help There are five options with different subsections. You can see them by specifying them before help. eg ember-mug poll --help ember-mug discover # Finds the mug in pairing mode for the first time ember-mug poll # fetches info and keeps listening for notifications ember-mug get name target-temp # Prints name and target temp of mug ember-mug set --name \"My mug\" --target-temp 56 .8 # Sets the name and target temp to specified values Basic options: Command Use discover Find/List all detected unpaired mugs in pairing mode find Find one already paired mugs info Connect to one mug and print its current state poll Connect to one mug and print its current state and keep watching for changes get Get the value(s) of one or more attribute(s) by name set Set one or more values on the mug","title":"Using CLI interface"}]}