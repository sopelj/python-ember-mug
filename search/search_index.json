{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#python-ember-mug","title":"Python Ember Mug","text":"<p>Python Library for interacting with Ember Mugs, Cups and Travel Mugs via Bluetooth</p> <ul> <li>Documentation: https://sopelj.github.io/python-ember-mug</li> <li>GitHub: https://github.com/sopelj/python-ember-mug</li> <li>PyPI: https://pypi.org/project/python-ember-mug/</li> </ul>"},{"location":"#summary","title":"Summary","text":"<p>This is an unofficial library to attempt to interact with Ember Mugs via Bluetooth. This was created for use with my Home Assistant integration, but could be useful separately and has a simple CLI interface too.</p> <p>All known Ember Mugs, Cups and Travel Mugs have been tested and work. If I missed one, or you have new feature ideas/issues, please let me know.</p> Device Tested Mug \u2713 Mug 2 \u2713 Cup \u2713 Travel Mug \u2713 Travel Mug 2 \u2713"},{"location":"#features","title":"Features","text":"<ul> <li>Finding devices</li> <li>Connecting to devices</li> <li>Reading/Writing most values</li> <li>Poll for changes</li> </ul> <p>Attributes by device:</p> Attribute Mug Cup Travel Mug Description Name R/W N/A R Name to give device LED Colour R/W R/W N/A Colour of front LED Current Temperature R R R Current temperature of the liquid in the mug Target Temperature R/W R/W R/W Desired temperature for the liquid Temperature Unit R/W R/W R/W Internal temperature unit for the app (C/F) Liquid Level R R R Approximate level of the liquid in the device Volume level N/A N/A R/W Volume of the button press beep Battery Percent R R R Current battery level On Charger R R R Device is on it's charger <p>*** Writing may only work if the devices has been set up in the app previously</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#python","title":"Python","text":"<pre><code>from ember_mug.scanner import find_mug, discover_mugs\nfrom ember_mug.mug import EmberMug\n\n# if first time with mug in pairing\nmugs = await discover_mugs()\ndevice = mugs[0]\n# after paired you can simply use\ndevice = await find_mug()\nmug = EmberMug(device)\nawait mug.update_all()\nprint(mug.data.formatted)\nawait mug.disconnect()\n\n# You can also use connection as a context manager\n# if you want to ensure connection before starting and cleanup on exit\nasync with mug.connection():\n    print('Connected.\\nFetching Info')\n    await mug.update_all()\n    print(mug.data.formatted)\n</code></pre>"},{"location":"#cli","title":"CLI","text":"<p>It can also be run via command line either directly with <code>ember-mug --help</code> or as a module with <code>python -m ember_mug --help</code> There are four options with different subsections. You can see them by specifying them before help. eg <code>ember-mug poll --help</code></p> <pre><code>ember-mug discover  # Finds the mug in pairing mode for the first time\nember-mug poll  # fetches info and keeps listening for notifications\nember-mug get name target-temp  # Prints name and target temp of mug\nember-mug set --name \"My mug\" --target-temp 56.8  # Sets the name and target temp to specified values\n</code></pre> <p>Basic options:</p> Command Use <code>discover</code> Find/List all detected unpaired devices in pairing mode <code>find</code> Find one already paired devices <code>info</code> Connect to one device and print its current state <code>poll</code> Connect to one device and print its current state and keep watching for changes <code>get</code> Get the value(s) of one or more attribute(s) by name <code>set</code> Set one or more values on the device <p></p>"},{"location":"#caveats","title":"Caveats","text":"<ul> <li>Since this api is not public, a lot of guesswork and reverse engineering is involved, so it's not perfect.</li> <li>If the device has not been set up in the app since it was reset, writing is not allowed. I don't know what they set in the app, but it changes something, and it doesn't work without it.</li> <li>Once that device has been set up in the app, you should ideally forget the device or at least turn off bluetooth whilst using it here, or you will probably get disconnected often</li> <li>I haven't figured out some attributes like udsk, dsk, location and timezone, but they are not very useful anyway.</li> </ul>"},{"location":"#troubleshooting","title":"Troubleshooting","text":""},{"location":"#operation-failed-with-att-error-0x0e-or-another-connection-error","title":"'Operation failed with ATT error: 0x0e' or another connection error","text":"<p>This seems to be caused by the bluetooth adaptor being in some sort of passive mode. I have not yet figured out how to wake it programmatically so sadly, you need to manually open <code>bluetoothctl</code> to do so. Please ensure the device is in pairing mode (ie the light is flashing blue or says \"PAIR\") and run the <code>bluetoothctl</code> command. You don't need to type anything. run it and wait until the mug connects.</p>"},{"location":"#development","title":"Development","text":"<p>Install: - hatch - pre-commit</p> <pre><code>pip install hatch\n# Use CLI interface\nhatch run ember-mug --help\n# Run Tests\nhatch run test:cov\n# View docs\nhatch docs:serve\n# Lint code\npre-commit run --all-files\n</code></pre>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.</p>"},{"location":"#notice-of-non-affiliation-and-disclaimer","title":"Notice of Non-Affiliation and Disclaimer","text":"<p>This project is not affiliated, associated, authorized, endorsed by, or in any way officially connected with Ember.</p> <p>The name Ember as well as related names, marks, emblems and images are registered trademarks of their respective owners.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#082","title":"[0.8.2]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Tests for Python 3.12</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Use debug level for connection timeout logger instead or error</li> </ul>"},{"location":"changelog/#081","title":"[0.8.1]","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Use debug level for disconnect callback instead of warning</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Don't require adapter keyword for other backends</li> </ul>"},{"location":"changelog/#080","title":"[0.8.0]","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Added support for Travel Mug 2</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Updated minimal dependencies</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Dropped support for Python 3.9 as it is no longer supported by bleak-retry-connector and Home Assistant</li> </ul>"},{"location":"changelog/#070","title":"[0.7.0]","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Added support for Travel Mug</li> <li>Added debugger to dump characteristics and their values for debugging</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Allow Travel Mug to be detected with shortened Bluetooth name</li> <li>Exclude led_colour attributes from the Travel Mug</li> <li>Add volume_level attribute for Travel Mug</li> <li>Make terms more generic as all devices are not Mugs</li> </ul>"},{"location":"changelog/#062","title":"[0.6.2]","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Added attributes to differentiate between device types</li> <li>Don't fetch name for the Ember \"Cup\" as it doesn't have it</li> <li>In theory the \"Cup\" should be supported</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>The model attribute of the data is now a Model class that provides attributes based on model</li> </ul>"},{"location":"changelog/#061","title":"[0.6.1]","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Discover Cups and Travel Mugs, but they are still not fully supported</li> <li>Debug option to print services and characteristics for debugging</li> </ul>"},{"location":"changelog/#060","title":"[0.6.0]","text":""},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>EmberMugConnection changed to EmberMug</li> <li>EmberMug changed to MugData</li> <li>Made ensure_connection private and call it automatically in most cases</li> <li>Log if disconnect was expected or not</li> </ul>"},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Lock for operations to ensure only one at a time</li> <li>_ensure_connection now called before every write and before bulk reads</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Changed condition that caused connections to be constantly reestablished because is_connected is not a bool.</li> <li>Don't call disconnect in disconnect callback</li> </ul>"},{"location":"changelog/#056","title":"[0.5.6]","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Set proper attribute for on charging base</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Update pre-commit, pytest and add dependabot</li> <li>register callback stores a dict to avoid duplicate registrations</li> </ul>"},{"location":"changelog/#055","title":"[0.5.5]","text":""},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>Set values on mug immediately after setting them</li> <li>Only add/remove callback if not already done</li> </ul>"},{"location":"changelog/#054","title":"[0.5.4]","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>More logging for different methods</li> </ul>"},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>Bump bleak to &gt;=0.19.5 for Home Assistant 2023.2</li> <li>Catch exceptions on querying DSK and UDSK and return empty strings</li> <li>No longer query \"extra\" attributes unless <code>include_extra=True</code> was passed to mug</li> </ul>"},{"location":"changelog/#053","title":"[0.5.3]","text":""},{"location":"changelog/#changed_9","title":"Changed","text":"<ul> <li>Changed UUIDs, PushEvent IDs, LiquidState and TemperatureUnit to Enum</li> <li>TemperatureUnit changed to include degree symbol to match with Home Assistant</li> </ul>"},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Added _read and_write helper methods with logging</li> </ul>"},{"location":"changelog/#052","title":"[0.5.2]","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Fixed logging</li> </ul>"},{"location":"changelog/#051","title":"[0.5.1]","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>as_dict() for dumping Mug info</li> <li>More tests</li> </ul>"},{"location":"changelog/#changed_10","title":"Changed","text":"<ul> <li>Allow unit with or without degree and handle Enum for Home Assistant in set_temperature_unit()</li> <li>Remove <code>metric</code> attribute, it was supposed to be <code>use_metric</code></li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fixed <code>_device</code> attribute which would not be updated on callback</li> </ul>"},{"location":"changelog/#050","title":"[0.5.0]","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>More tests for cli interface</li> <li>Add tests for Python 3.11</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Automatic tests on macOS and Windows. They should still work though.</li> </ul>"},{"location":"changelog/#changed_11","title":"Changed","text":"<ul> <li>Update bleak and bleak-retry-connector to get retry decorator and match home assistant 2023.1</li> <li>Update documentation</li> <li>Updated linting and CI tools</li> </ul>"},{"location":"changelog/#042","title":"[0.4.2]","text":""},{"location":"changelog/#changed_12","title":"Changed","text":"<ul> <li>Also catch NotImplementedError when trying to pair. (Affects Home Assistant ESPHome proxies)</li> </ul>"},{"location":"changelog/#041","title":"[0.4.1]","text":""},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Format Colour as hex when printed (for CLI)</li> </ul>"},{"location":"changelog/#040","title":"[0.4.0]","text":""},{"location":"changelog/#changed_13","title":"Changed","text":"<ul> <li>Improve documentation for setting values</li> </ul>"},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>cli option to get specific attributes by name</li> <li>cli option to set attributes</li> <li>cli option to limit output</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Column number calculation</li> </ul>"},{"location":"changelog/#037","title":"[0.3.7]","text":""},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li>Remove ensure_connection in update_initial and update_multiple because it causes timeouts and loops</li> </ul>"},{"location":"changelog/#changes","title":"Changes","text":"<ul> <li>Update docs to document procedure for writing attributes</li> </ul>"},{"location":"changelog/#036","title":"[0.3.6]","text":""},{"location":"changelog/#fix_1","title":"Fix","text":"<ul> <li>Remove retry_bluetooth_connection_error...</li> </ul>"},{"location":"changelog/#035","title":"[0.3.5]","text":""},{"location":"changelog/#fix_2","title":"Fix","text":"<ul> <li>Add fallback method for retry_bluetooth_connection_error to not break on patch.</li> </ul>"},{"location":"changelog/#034","title":"[0.3.4]","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li>Use retry_bluetooth_connection_error on update methods</li> </ul>"},{"location":"changelog/#033","title":"[0.3.3]","text":""},{"location":"changelog/#fix_3","title":"Fix","text":"<ul> <li>Try to fetch services on initial connection to wake device</li> </ul>"},{"location":"changelog/#032","title":"[0.3.2]","text":""},{"location":"changelog/#fix_4","title":"Fix","text":"<ul> <li>Try to fix, but also always catch encoding errors</li> </ul>"},{"location":"changelog/#031","title":"[0.3.1]","text":""},{"location":"changelog/#fix_5","title":"Fix","text":"<ul> <li>Catch error decoding UDSK and log warning to avoid error setting up</li> </ul>"},{"location":"changelog/#030","title":"[0.3.0]","text":""},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Also packaged as CLI command to be used directly</li> <li>Add register_callback</li> <li>Fire callbacks in notifications and all updates</li> <li>Add set_device and pass to establish_connection</li> </ul>"},{"location":"changelog/#changed_14","title":"Changed","text":"<ul> <li>Update bleak-retry-connector to 1.17.1</li> <li>Update bleak to 0.17.0</li> <li>Renamed connect to ensure_connection</li> </ul>"},{"location":"changelog/#025","title":"[0.2.5]","text":""},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Catch EOFError during pair, which is not caught in bleak/dbus-next currently</li> </ul>"},{"location":"changelog/#024","title":"[0.2.4]","text":""},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>Lots of tests</li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Typo in metric in print_changes</li> <li>Fix Name validation rules</li> <li>set_temperature_unit method name</li> </ul>"},{"location":"changelog/#023","title":"[0.2.3]","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li>Format information as table in CLI</li> <li>Print message with error instead of stack trace in cli if bleak error occurs in find/discover</li> </ul>"},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Incorrect name for imperial CLI flag</li> </ul>"},{"location":"changelog/#022","title":"[0.2.2]","text":""},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Only try to disconnect if client is present</li> </ul>"},{"location":"changelog/#021","title":"[0.2.1]","text":""},{"location":"changelog/#added_15","title":"Added","text":"<ul> <li>Tests for data, scanner, mug</li> <li>CLI flag for imperial units</li> </ul>"},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>meta_display was not property</li> <li>target_temp returned current_temp</li> <li>extra flag was not applied to polling</li> </ul>"},{"location":"changelog/#020","title":"[0.2.0]","text":""},{"location":"changelog/#added_16","title":"Added","text":"<ul> <li>bleak-retry-connector to help connect and maintain connection to mug</li> <li>Add option to show/hide less useful mug info</li> <li>Formatting for polled changes in CLI</li> <li>Add more tests</li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li>Support for python 3.8 - In order to use bleak-retry-connector</li> </ul>"},{"location":"changelog/#012---2022-09-03","title":"[0.1.2] - 2022-09-03","text":""},{"location":"changelog/#added_17","title":"Added","text":"<ul> <li>Add adapter param to EmberMugConnection and scanners (for BlueZ only)</li> <li>Add mac params to discover and find methods</li> <li>Decode udsk and mug id. Even if the values aren't super useful.</li> </ul>"},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Improve CLI interface and gracefully handle no options provided</li> </ul>"},{"location":"changelog/#011---2022-09-03","title":"[0.1.1] - 2022-09-03","text":"<ul> <li>Bump version because of issues with name conflicts</li> <li>Fix GitHub Actions issues with Poetry</li> </ul>"},{"location":"changelog/#010---2022-08-26","title":"[0.1.0] - 2022-08-26","text":"<ul> <li>First release on PyPI test.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/sopelj/python-ember-mug/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Python Ember Mug could always use more documentation, whether as part of the official Python Ember Mug docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/sopelj/python-ember-mug/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started","text":"<p>Ready to contribute? Here's how to set up <code>python-ember-mug</code> for local development.</p> <ol> <li>Fork the <code>python-ember-mug</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>git clone git@github.com:your_name_here/python-ember-mug.git\n</code></pre> </li> <li> <p>Ensure hatch is installed.</p> </li> <li> <p>You can directly run the CLI from hatch with:</p> <pre><code>hatch run ember-mug --help\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with Hatch:</p> <pre><code>hatch run test:cov\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.9, 3.10 and 3.11. Check    https://github.com/sopelj/python-ember-mug/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<pre><code>hatch run test:cov tests/test_python_ember_mug.py\n</code></pre> <p>To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>hatch version patch # possible: major / minor / patch\ngit add .\ngit commit -m \"Bump version: v$(hatch version)\"\ngit tag \"v$(hatch version)\"\ngit push\ngit push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Python Ember Mug, run this command in your terminal:</p> <pre><code>pip install python-ember-mug\n</code></pre> <p>This is the preferred method to install Python Ember Mug, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for Python Ember Mug can be downloaded from the [GitHub repo][https://github.com/sopelj/python-ember-mug].</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/sopelj/python-ember-mug\n</code></pre> <p>Or download the [tarball][https://github.com/sopelj/python-ember-mug/tarball/master]:</p> <pre><code>curl -OJL https://github.com/sopelj/python-ember-mug/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":""},{"location":"usage/#in-python-project","title":"In Python Project","text":"<p>To use Python Ember Mug in a project</p> <pre><code>from ember_mug.scanner import find_mug, discover_mugs\nfrom ember_mug.mug import EmberMug\n\n# if first time with mug in pairing\nmugs = await discover_mugs()\ndevice = mugs[0]\n# after paired you can simply use\ndevice = await find_mug()\nmug = EmberMug(device)\nawait mug.update_all()\nprint(mug.data.formatted)\nawait mug.disconnect()\n\n# You can also use connection as a context manager\n# if you want to ensure connection before starting and cleanup on exit\nasync with mug.connection():\n    print('Connected.\\nFetching Info')\n    await mug.update_all()\n    print(mug.data.formatted)\n</code></pre>"},{"location":"usage/#using-cli-interface","title":"Using CLI interface","text":"<p>It can also be run via command line either directly with <code>ember-mug --help</code> or as a module with <code>python -m ember_mug --help</code> There are five options with different subsections. You can see them by specifying them before help. eg <code>ember-mug poll --help</code></p> <pre><code>ember-mug discover  # Finds the mug in pairing mode for the first time\nember-mug poll  # fetches info and keeps listening for notifications\nember-mug get name target-temp  # Prints name and target temp of mug\nember-mug set --name \"My mug\" --target-temp 56.8  # Sets the name and target temp to specified values\n</code></pre> <p>Basic options:</p> Command Use <code>discover</code> Find/List all detected unpaired mugs in pairing mode <code>find</code> Find one already paired mugs <code>info</code> Connect to one mug and print its current state <code>poll</code> Connect to one mug and print its current state and keep watching for changes <code>get</code> Get the value(s) of one or more attribute(s) by name <code>set</code> Set one or more values on the mug <p></p>"}]}